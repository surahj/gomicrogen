package auth

import (
	"fmt"

	"{{ .ModuleName }}/app/constants"
	"{{ .ModuleName }}/app/library"
	"{{ .ModuleName }}/app/models"
	"github.com/labstack/echo-contrib/session"
	"github.com/labstack/echo/v4"
	jwtfiltergolang "github.com/mudphilo/gwt"
	"github.com/sirupsen/logrus"

	"net/http"
	"os"
	"time"
)

const TokenServiceKey = 1
const TokenTypeAPI = 2
const TokenTypeBasicAuth = 3
const TokenTypeSMPP = 4
const TokenTypeUnknown = 6
const genericAuthFailed = "Authorization Failed. You are not authorized to %s %s"
const TokenTypeAPIKey = 5

// getToken gets token type based on the header name used
// Authorization - JWT Token
// x-token - static service to service token
// api-key - AES16 encrypted token
func getToken(c echo.Context) (token string, tokeType int64) {

	r := c.Request()

	token = r.Header.Get("Authorization")
	if len(token) > 0 {
		return token, TokenTypeAPI
	}

	token = r.Header.Get("x-token")
	if len(token) > 0 {
		return token, TokenServiceKey
	}

	token = r.Header.Get("api-key")
	if len(token) > 0 {
		return token, TokenTypeAPIKey
	}

	return "", TokenTypeUnknown
}

// checkAuthenticate checks if the request is authenticated
func checkAuthenticate(c echo.Context, module string, permission string) (authenticated bool, message string, httpStatus int) {

	token, tokenType := getToken(c)

	if tokenType == TokenTypeUnknown {
		return false, fmt.Sprintf(genericAuthFailed, permission, module), http.StatusUnauthorized
	}

	if tokenType == TokenTypeAPIKey {
		return checkAPIKeyAuth(c, token, module, permission)
	}

	if tokenType == TokenServiceKey {
		return checkServiceTokenAuth(c, token, module, permission)
	}

	if tokenType == TokenTypeAPI {
		return checkJWTAuth(c, token, module, permission)
	}

	return false, fmt.Sprintf(genericAuthFailed, permission, module), http.StatusUnauthorized
}

// checkAPIKeyAuth checks if the API key is valid
func checkAPIKeyAuth(c echo.Context, token string, module string, permission string) (authenticated bool, message string, httpStatus int) {

	// Get the API key from environment
	apiKey := os.Getenv("API_KEY")
	if apiKey == "" {
		return false, fmt.Sprintf(genericAuthFailed, permission, module), http.StatusInternalServerError
	}

	// Decrypt the token
	decryptedToken, err := library.Decrypt(apiKey, token)
	if err != nil {
		return false, fmt.Sprintf(genericAuthFailed, permission, module), http.StatusUnauthorized
	}

	// Check if the token is valid
	if decryptedToken != "valid" {
		return false, fmt.Sprintf(genericAuthFailed, permission, module), http.StatusUnauthorized
	}

	return true, "", http.StatusOK
}

// checkServiceTokenAuth checks if the service token is valid
func checkServiceTokenAuth(c echo.Context, token string, module string, permission string) (authenticated bool, message string, httpStatus int) {

	// Get the service token from environment
	serviceToken := os.Getenv("SERVICE_TOKEN")
	if serviceToken == "" {
		return false, fmt.Sprintf(genericAuthFailed, permission, module), http.StatusInternalServerError
	}

	// Check if the token matches
	if token != serviceToken {
		return false, fmt.Sprintf(genericAuthFailed, permission, module), http.StatusUnauthorized
	}

	return true, "", http.StatusOK
}

// checkJWTAuth checks if the JWT token is valid
func checkJWTAuth(c echo.Context, token string, module string, permission string) (authenticated bool, message string, httpStatus int) {

	// Get the JWT secret from environment
	jwtSecret := os.Getenv("JWT_SECRET")
	if jwtSecret == "" {
		return false, fmt.Sprintf(genericAuthFailed, permission, module), http.StatusInternalServerError
	}

	// Parse the JWT token
	claims, err := jwtfiltergolang.ParseToken(token, jwtSecret)
	if err != nil {
		return false, fmt.Sprintf(genericAuthFailed, permission, module), http.StatusUnauthorized
	}

	// Check if the token has the required permission
	if !hasPermission(claims, module, permission) {
		return false, fmt.Sprintf(genericAuthFailed, permission, module), http.StatusForbidden
	}

	// Store user information in session
	sess, _ := session.Get("session", c)
	sess.Values["user_id"] = claims.UserID
	sess.Values["username"] = claims.Username
	sess.Values["permissions"] = claims.Permissions
	sess.Save(c.Request(), c.Response().Writer)

	return true, "", http.StatusOK
}

// hasPermission checks if the user has the required permission
func hasPermission(claims *jwtfiltergolang.Claims, module string, permission string) bool {
	// This is a simplified permission check
	// In a real application, you would have a more sophisticated permission system
	requiredPermission := fmt.Sprintf("%s:%s", module, permission)
	
	for _, perm := range claims.Permissions {
		if perm == requiredPermission {
			return true
		}
	}
	
	return false
}

// saveSession saves the session with the token
func saveSession(c echo.Context, token string) (authenticated bool, message string, httpStatus int) {

	sess, err := session.Get("session", c)
	if err != nil {
		logrus.
			WithFields(logrus.Fields{
				constants.DESCRIPTION: "Error getting session",
				constants.DATA:        token,
			}).
			Error(err.Error())

		return false, "Session error", http.StatusInternalServerError
	}

	sess.Values["token"] = token
	sess.Values["expires_at"] = time.Now().Add(24 * time.Hour).Unix()

	err = sess.Save(c.Request(), c.Response().Writer)
	if err != nil {
		logrus.
			WithFields(logrus.Fields{
				constants.DESCRIPTION: "Error saving session error",
				constants.DATA:        token,
			}).
			Error(err.Error())

		return false, fmt.Sprintf(genericAuthFailed, permission, module), http.StatusInternalServerError
	}

	return true, "", http.StatusOK
}

func Authenticate(pass echo.HandlerFunc, module string, permission string) echo.HandlerFunc {

	return func(c echo.Context) error {

		authenticated, message, httpStatus := checkAuthenticate(c, module, permission)
		if authenticated {
			return pass(c)
		}

		return echo.NewHTTPError(httpStatus, models.ResponseMessage{
			Status:  httpStatus,
			Message: message,
		})
	}
} 